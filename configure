#!/usr/bin/env bash
set -euo pipefail

# ============================================================
# Defaults
# ============================================================
LIB_TYPE="both"            # static | shared | both  (default: both)
BUILD_BOTH="true"          # install both by default
ENABLE_DEBUG="false"       # release by default
ENABLE_LTO="full"          # off | full | thin   (DEFAULT: full)
USE_LLD="true"             # prefer lld with Clang if available
ARCH_FLAG=""               # e.g. -march=native or -march=x86-64-v3
PREFIX="/usr/local"
COMPILER="clang++"         # or g++
VERSION="1.1.0"
SOVERSION="1"

OS="$(uname)"
SHARED_LIB_EXT=".so"
LINKER_FLAGS="-shared"
INSTALL_NAME_FLAG=""
SONAME_FLAG="-Wl,-soname,libBML.so.${SOVERSION}"

if [[ "$OS" == "Darwin" ]]; then
  SHARED_LIB_EXT=".dylib"
  LINKER_FLAGS="-dynamiclib"
  INSTALL_NAME_FLAG='-Wl,-install_name,@rpath/libBML.dylib'
  SONAME_FLAG=""
fi

# ============================================================
# Help
# ============================================================
show_help() {
  cat <<EOF
Usage: ./configure [options]

Library selection:
  --enable-shared           Build only the shared library
  --enable-static           Build only the static library
  --enable-both             Build both (default)
  --disable-both            Install only the selected type (if you also set one above)

Build options:
  --enable-debug            Debug build (-O1 -g -fno-omit-frame-pointer)
  --enable-lto[=full|thin]  Enable LTO (thin = Clang only). Default: full
  --disable-lto             Disable LTO
  --compiler=<cxx>          C++ compiler (clang++ [default] or g++)
  --arch=<val>              CPU baseline, e.g. native, x86-64-v2, x86-64-v3

Install:
  --prefix=<dir>            Install prefix (default: /usr/local)

Versioning:
  --version=<X.Y.Z>         Project version string (default ${VERSION})
  --soname=<N>              ABI SONAME version (default ${SOVERSION})

Linker:
  --use-lld / --no-lld      Prefer lld when using Clang (default: use)

Other:
  --help                    This help

Notes:
- This script enforces 64-bit builds (-m64).
- By default it builds *and* installs both static and shared libraries.
- Tests are built & run by default as part of 'make'. Skip with: make NO_TESTS=1
EOF
}

# ============================================================
# Parse arguments
# ============================================================
for arg in "$@"; do
  case "$arg" in
    --enable-shared)   LIB_TYPE="shared"; BUILD_BOTH="false" ;;
    --enable-static)   LIB_TYPE="static"; BUILD_BOTH="false" ;;
    --enable-both)     LIB_TYPE="both";   BUILD_BOTH="true"  ;;
    --disable-both)    BUILD_BOTH="false" ;;
    --enable-debug)    ENABLE_DEBUG="true" ;;
    --enable-lto)      ENABLE_LTO="full" ;;
    --enable-lto=full) ENABLE_LTO="full" ;;
    --enable-lto=thin) ENABLE_LTO="thin" ;;
    --disable-lto)     ENABLE_LTO="off" ;;
    --compiler=*)      COMPILER="${arg#*=}" ;;
    --arch=*)          ARCH_FLAG="-march=${arg#*=}" ;;
    --prefix=*)        PREFIX="${arg#*=}" ;;
    --version=*)       VERSION="${arg#*=}" ;;
    --soname=*)        SOVERSION="${arg#*=}"; SONAME_FLAG="-Wl,-soname,libBML.so.${SOVERSION}" ;;
    --use-lld)         USE_LLD="true" ;;
    --no-lld)          USE_LLD="false" ;;
    --help)            show_help; exit 0 ;;
    *) echo "Unknown option: $arg"; show_help; exit 1 ;;
  esac
done

# ============================================================
# 64-bit enforcement & compiler detection
# ============================================================
ARCH_BITS="-m64"

if ! command -v "$COMPILER" >/dev/null 2>&1; then
  echo "error: compiler '$COMPILER' not found"; exit 1
fi

COMP_VER="$("$COMPILER" --version 2>/dev/null || true)"
IS_CLANG="false"; IS_GCC="false"
if echo "$COMP_VER" | grep -qi clang; then IS_CLANG="true"; fi
if echo "$COMP_VER" | grep -qi gcc;   then IS_GCC="true";   fi
if [[ "$IS_CLANG" == "false" && "$IS_GCC" == "false" ]]; then
  echo "warning: unknown compiler; treating as GCC-like."
  IS_GCC="true"
fi

# Trivial 64-bit compile test
echo 'int main(){return 0;}' > .cfg_test.cpp
"$COMPILER" -std=c++17 $ARCH_BITS ${ARCH_FLAG:+$ARCH_FLAG} -c .cfg_test.cpp -o .cfg_test.o >/dev/null 2>&1 \
  || { echo "error: 64-bit compile failed. Is a 64-bit toolchain installed?"; rm -f .cfg_test.*; exit 1; }
rm -f .cfg_test.*

# ============================================================
# Flags
# ============================================================
CXX="$COMPILER"
CXXSTD="-std=c++17"
BASEOPTS="-fvisibility=hidden $ARCH_BITS ${ARCH_FLAG:+$ARCH_FLAG}"
OPTS="$([[ "$ENABLE_DEBUG" == "true" ]] && echo "-O1 -g -fno-omit-frame-pointer" || echo "-O3 -g0")"

if [[ "$IS_CLANG" == "true" ]]; then
  WARN="-Wall -Wextra -Wpedantic -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-covered-switch-default -Wno-padded"
else
  WARN="-Wall -Wextra -Wpedantic"
fi

# LTO
LTO_CXX=""; LTO_LD=""; LDSEL=""
if [[ "$ENABLE_LTO" != "off" ]]; then
  if [[ "$IS_CLANG" == "true" ]]; then
    if [[ "$ENABLE_LTO" == "thin" ]]; then
      LTO_CXX="-flto=thin"; LTO_LD="-flto=thin -Wl,--lto-O3"
    else
      LTO_CXX="-flto";      LTO_LD="-flto -Wl,--lto-O3"
    fi
    if [[ "$USE_LLD" == "true" ]] && "$COMPILER" -fuse-ld=lld -Wl,--version >/dev/null 2>&1; then
      LDSEL="-fuse-ld=lld"
    fi
  else
    if [[ "$ENABLE_LTO" == "thin" ]]; then
      echo "note: ThinLTO requested with GCC; using full LTO instead."
    fi
    LTO_CXX="-flto"
    # Prefer gold if available; plugin opt O3 for GCC LTO where supported
    if "$COMPILER" -fuse-ld=gold -Wl,-v >/dev/null 2>&1; then
      LDSEL="-fuse-ld=gold"
      LTO_LD="-flto -Wl,-plugin-opt=O3"
    else
      LTO_LD="-flto"
    fi
  fi
fi

# ar/ranlib for GCC+LTO archives
AR="ar"; RANLIB="ranlib"
if [[ "$IS_GCC" == "true" && "$ENABLE_LTO" != "off" ]]; then
  command -v gcc-ar     >/dev/null 2>&1 && AR="gcc-ar"
  command -v gcc-ranlib >/dev/null 2>&1 && RANLIB="gcc-ranlib"
fi

# ============================================================
# Generate Makefile
# ============================================================
cat > Makefile <<'EOF'
# === Auto-generated (do not edit) ===
SHELL := /bin/bash

# Toolchain
CXX       := __CXX__
AR        := __AR__
RANLIB    := __RANLIB__

# Flags
CXXSTD    := __CXXSTD__
WARN      := __WARN__
OPTS      := __OPTS__
BASEOPTS  := __BASEOPTS__
LTOCXX    := __LTOCXX__
LTOLD     := __LTOLD__
LDSEL     := __LDSEL__

PREFIX    := __PREFIX__
SRC_DIR   := src
OBJ_DIR   := obj
LIB_DIR   := lib
BIN_DIR   := bin
INC_DIR   := include

VERSION   := __VERSION__
SOVERSION := __SOVERSION__
OS        := __OS__
SHLEXT    := __SHLEXT__
LINKFLAGS := __LINKFLAGS__
SONAMEFLG := __SONAMEFLG__
INSTALLNM := __INSTALLNM__

# Build/Install selection
LIB_TYPE   := __LIBTYPE__   # static | shared | both
BUILD_BOTH := __BUILDBOTH__ # true | false

# Sources
SOURCES_ALL  := $(wildcard $(SRC_DIR)/*.cpp)
SOURCES_LIB  := $(filter-out $(SRC_DIR)/main.cpp $(SRC_DIR)/testMatrix.cpp,$(SOURCES_ALL))
OBJECTS_LIB  := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SOURCES_LIB))
SOURCES_TEST := $(SRC_DIR)/main.cpp $(SRC_DIR)/testMatrix.cpp
OBJECTS_TEST := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SOURCES_TEST))

# Artefacts
STATIC_LIB      := $(LIB_DIR)/libBML.a
SHARED_LIB      := $(LIB_DIR)/libBML$(SHLEXT)
TEST_BIN_SHARED := $(BIN_DIR)/testProgram_shared
TEST_BIN_STATIC := $(BIN_DIR)/testProgram_static

# rpath to find lib from bin/ at runtime
ifeq ($(OS),Darwin)
RPATH_FLAG := -Wl,-rpath,@loader_path/../lib
else
RPATH_FLAG := -Wl,-rpath,'$$ORIGIN/../lib'
endif

# Which libs/tests to build by default
ifeq ($(LIB_TYPE),shared)
ALL_LIBS     := shared
TEST_DEFAULT := $(TEST_BIN_SHARED)
else ifeq ($(LIB_TYPE),static)
ALL_LIBS     := static
TEST_DEFAULT := $(TEST_BIN_STATIC)
else
ALL_LIBS     := static shared
TEST_DEFAULT := $(TEST_BIN_SHARED) $(TEST_BIN_STATIC)
endif

# Tests on by default (disable with: make NO_TESTS=1)
NO_TESTS ?= 0

# Flags
CXXFLAGS  := $(CXXSTD) $(WARN) $(OPTS) $(BASEOPTS) $(LTOCXX) -I$(INC_DIR)
LDFLAGS   := $(LTOLD) $(LDSEL)

# Phonies
.PHONY: all static shared test check install uninstall clean clobber info

# Default: build libs and run tests
ifeq ($(NO_TESTS),1)
all: $(ALL_LIBS)
else
all: $(ALL_LIBS) check
endif

info:
	@echo "CXXFLAGS = $(CXXFLAGS)"
	@echo "LDFLAGS  = $(LDFLAGS)"
	@echo "LIB_TYPE = $(LIB_TYPE)  (install both: $(BUILD_BOTH))"
	@echo "SOURCES_LIB = $(SOURCES_LIB)"

# Libraries
static: $(STATIC_LIB)
shared: $(SHARED_LIB)

$(STATIC_LIB): $(OBJECTS_LIB)
	@mkdir -p $(LIB_DIR)
	$(AR) rcs $@ $^
	$(RANLIB) $@

$(SHARED_LIB): $(OBJECTS_LIB)
	@mkdir -p $(LIB_DIR)
	$(CXX) $^ -o $@ $(LINKFLAGS) $(LDFLAGS) $(SONAMEFLG) $(INSTALLNM)

# Objects
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -fPIC -c $< -o $@

# Tests (shared/static)
test: check

$(TEST_BIN_SHARED): $(OBJECTS_TEST) $(SHARED_LIB)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(OBJECTS_TEST) -L$(LIB_DIR) -lBML $(RPATH_FLAG) $(LDFLAGS) -o $@

$(TEST_BIN_STATIC): $(OBJECTS_TEST) $(STATIC_LIB)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(OBJECTS_TEST) $(STATIC_LIB) $(LDFLAGS) -o $@

check: $(TEST_DEFAULT)
	@set -e; \
	for t in $(TEST_DEFAULT); do \
	  echo "[TEST] $$t"; $$t; \
	done

# Install
install: $(ALL_LIBS)
	@mkdir -p $(PREFIX)/lib $(PREFIX)/include
ifeq ($(BUILD_BOTH),true)
	@if [ -f "$(STATIC_LIB)" ]; then cp "$(STATIC_LIB)" "$(PREFIX)/lib/"; fi
	@if [ -f "$(SHARED_LIB)" ]; then \
	  if [ "$(OS)" = "Darwin" ]; then \
	    cp "$(SHARED_LIB)" "$(PREFIX)/lib/"; \
	  else \
	    cp "$(SHARED_LIB)" "$(PREFIX)/lib/libBML.so.$(SOVERSION)"; \
	    ln -sf "libBML.so.$(SOVERSION)" "$(PREFIX)/lib/libBML.so"; \
	  fi \
	fi
else
	@if [ "$(LIB_TYPE)" = "static" ] && [ -f "$(STATIC_LIB)" ]; then cp "$(STATIC_LIB)" "$(PREFIX)/lib/"; fi
	@if [ "$(LIB_TYPE)" = "shared" ] && [ -f "$(SHARED_LIB)" ]; then \
	  if [ "$(OS)" = "Darwin" ]; then \
	    cp "$(SHARED_LIB)" "$(PREFIX)/lib/"; \
	  else \
	    cp "$(SHARED_LIB)" "$(PREFIX)/lib/libBML.so.$(SOVERSION)"; \
	    ln -sf "libBML.so.$(SOVERSION)" "$(PREFIX)/lib/libBML.so"; \
	  fi \
	fi
endif
	@cp -R $(INC_DIR)/* "$(PREFIX)/include/"

uninstall:
	@rm -f "$(PREFIX)/lib/libBML.a"
ifeq ($(OS),Darwin)
	@rm -f "$(PREFIX)/lib/libBML.dylib"
else
	@rm -f "$(PREFIX)/lib/libBML.so" "$(PREFIX)/lib/libBML.so.$(SOVERSION)"
endif
	@# headers left in place intentionally

clean:
	@rm -rf $(OBJ_DIR) $(BIN_DIR)

clobber: clean
	@rm -rf $(LIB_DIR)
# === End of Makefile ===
EOF

# Fill placeholders
sed -i \
  -e "s#__CXX__#${CXX}#g" \
  -e "s#__AR__#${AR}#g" \
  -e "s#__RANLIB__#${RANLIB}#g" \
  -e "s#__CXXSTD__#${CXXSTD}#g" \
  -e "s#__WARN__#${WARN}#g" \
  -e "s#__OPTS__#${OPTS}#g" \
  -e "s#__BASEOPTS__#${BASEOPTS//\//\\/}#g" \
  -e "s#__LTOCXX__#${LTO_CXX}#g" \
  -e "s#__LTOLD__#${LTO_LD}#g" \
  -e "s#__LDSEL__#${LDSEL}#g" \
  -e "s#__PREFIX__#${PREFIX//\//\\/}#g" \
  -e "s#__VERSION__#${VERSION}#g" \
  -e "s#__SOVERSION__#${SOVERSION}#g" \
  -e "s#__OS__#${OS}#g" \
  -e "s#__SHLEXT__#${SHARED_LIB_EXT}#g" \
  -e "s#__LINKFLAGS__#${LINKER_FLAGS}#g" \
  -e "s#__SONAMEFLG__#${SONAME_FLAG}#g" \
  -e "s#__INSTALLNM__#${INSTALL_NAME_FLAG}#g" \
  -e "s#__LIBTYPE__#${LIB_TYPE}#g" \
  -e "s#__BUILDBOTH__#${BUILD_BOTH}#g" \
  Makefile

# Summary
echo "Configuration complete."
echo "  Compiler      : $COMPILER ($( [[ $IS_CLANG == true ]] && echo Clang || echo GCC ))"
echo "  Debug         : $ENABLE_DEBUG"
echo "  LTO           : $ENABLE_LTO (default is FULL)"
echo "  Linker select : $( [[ -n ${LDSEL} ]] && echo "$LDSEL" || echo default )"
echo "  64-bit        : enforced (-m64)"
echo "  Arch          : ${ARCH_FLAG:-default}"
echo "  Library type  : $LIB_TYPE (install both: $BUILD_BOTH)"
echo "  Prefix        : $PREFIX"
echo "  Version/SO    : ${VERSION}/${SOVERSION}"

